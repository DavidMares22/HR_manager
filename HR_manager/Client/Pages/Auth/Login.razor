@page "/login"

@inject IAccountsRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IDisplayMessage displayMessage


@using HR_manager.Client.Auth

<HeadingComponent Text="Login" />

<div class="col-lg-6 offset-lg-3 ">
    <EditForm Model="userLogin" OnValidSubmit="CreateUser">
        <DataAnnotationsValidator />


        <div class="form-group">
            <label>Email:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userLogin.Email" />
                <ValidationMessage For="@(() => userLogin.Email)" />
            </div>
        </div>

        <div class="form-group">
            <label>Password:</label>
            <div>
                <InputPassword class="form-control" @bind-Value="@userLogin.Password" />
                <ValidationMessage For="@(() => userLogin.Password)" />
            </div>
        </div>

    <SfSpinner @bind-Visible="@VisibleProperty">
    </SfSpinner>

        <button type="submit" class="btn btn-dark btn-block">Login</button>

    </EditForm>

</div>


@code {
    private bool VisibleProperty { get; set; } = false;
    private UserLogin userLogin = new UserLogin();

    private async Task CreateUser()
    {
        VisibleProperty = true;
        List<string> userToken = await accountsRepository.Login(userLogin);


        if (userToken.ElementAt(0) == "Error: ")
        {
            await displayMessage.DisplayErrorMessage(string.Join(" ", userToken));
            VisibleProperty = false;
        }
        else
        {
            Console.WriteLine(userToken.ElementAt(1));
            await loginService.Login(userToken.ElementAt(1));
            VisibleProperty = false;
            navigationManager.NavigateTo("");
        }

    }

}
