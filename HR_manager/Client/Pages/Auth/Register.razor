@page "/register"

@inject IAccountsRepository accountsRepository
@inject IEmployeeRepository employeeRepository
@inject ILoginService loginService
@inject IDisplayMessage displayMessage

@using HR_manager.Client.Auth


<HeadingComponent  Text="Register"/>

<div class="col-lg-6 offset-lg-3 ">
    <EditForm Model="@userInfo" OnValidSubmit="CreateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.Email" />
                <ValidationMessage For="@(() => userInfo.Email)" />
            </div>
        </div>

        <div class="form-group">
            <label>Password:</label>
            <div>
                <InputPassword class="form-control" @bind-Value="@userInfo.Password" />
                <ValidationMessage For="@(() => userInfo.Password)" />
            </div>
        </div>

        <div class="form-group">
            <label>First Name:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.FirstName" />
                <ValidationMessage For="@(() => userInfo.FirstName)" />
            </div>
        </div>

        <div class="form-group">
            <label>Middle Name:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.MiddleName" />

            </div>
        </div>

        <div class="form-group">
            <label>Last Name:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.LastName" />
                <ValidationMessage For="@(() => userInfo.LastName)" />
            </div>
        </div>

        <div class="form-group">
            <label>Role:</label>
            <select id="myselect" class="form-control" @onchange="selectedValue">

                <option value="User">User</option>
                <option value="Administrator">Administrator</option>

            </select>
        </div>

        <SfSpinner @bind-Visible="@VisibleProperty">
        </SfSpinner>

        <button type="submit" class="btn btn-dark btn-block">Register</button>

    </EditForm>

</div>

@code {


    private UserInfo userInfo = new UserInfo();
    private EmployeeType employee = new EmployeeType();
    private List<string> rolesList = new List<string>(new string[] { "User" });

    private bool VisibleProperty { get; set; } = false;

    public string SelectedRole = "";
    public void selectedValue(ChangeEventArgs args)
    {
        SelectedRole = args.Value.ToString();

        rolesList.RemoveAt(0);
        rolesList.Add(SelectedRole);
    }

    private async Task CreateUser()
    {
        VisibleProperty = true;

        userInfo.Roles = rolesList;

        List<string> userToken = await accountsRepository.Register(userInfo);

        if (userToken.ElementAt(0) == "Error: ")
        {
            VisibleProperty = false;
            await displayMessage.DisplayErrorMessage(string.Join(" ", userToken));
        }
        else
        {

            try
            {
                employee.Name = userInfo.FirstName;
                employee.MiddleName = userInfo.MiddleName;
                employee.LastName = userInfo.LastName;
                employee.UserId = userToken.ElementAt(2);

                await employeeRepository.CreateEmployee(employee);
                await displayMessage.DisplaySuccessMessage(string.Join(" ", userToken));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error create employee " + ex);
            }
            VisibleProperty = false;
        }

    }

}
