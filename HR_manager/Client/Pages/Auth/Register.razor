@page "/register"

@inject IAccountsRepository accountsRepository
@inject IEmployeeRepository employeeRepository
@inject ILoginService loginService
@inject IDisplayMessage displayMessage

@using HR_manager.Client.Auth

<h3>Register</h3>

<EditForm Model="@userInfo" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.Email" />
            <ValidationMessage For="@(() => userInfo.Email)" />
        </div>
    </div>

    <div class="form-group">
        <label>Password:</label>
        <div>
            <InputPassword class="form-control" @bind-Value="@userInfo.Password" />
            <ValidationMessage For="@(() => userInfo.Password)" />
        </div>
    </div>

    <div class="form-group">
        <label>First Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.FirstName" />
            <ValidationMessage For="@(() => userInfo.FirstName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Middle Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.MiddleName" />

        </div>
    </div>

    <div class="form-group">
        <label>Last Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="@userInfo.LastName" />
            <ValidationMessage For="@(() => userInfo.LastName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Role:</label>
        <select id="myselect" class="form-control" @onchange="selectedValue">

            <option value="User">User</option>
            <option value="Administrator">Administrator</option>

        </select>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>

</EditForm>

@code {


    private UserInfo userInfo = new UserInfo();
    private EmployeeType employee = new EmployeeType();
    private List<string> rolesList = new List<string>(new string[] { "User" });

    public string SelectedValue = "";
    public void selectedValue(ChangeEventArgs args)
    {
        SelectedValue = args.Value.ToString();

        rolesList.RemoveAt(0);
        rolesList.Add(SelectedValue);
    }

    private async Task CreateUser()
    {
        userInfo.Roles = rolesList;

        List<string> userToken = await accountsRepository.Register(userInfo);

        if (userToken.ElementAt(0) == "Error: ")
        {
            await displayMessage.DisplayErrorMessage(string.Join(" ", userToken));
        }
        else
        {

            try
            {
                employee.Name = userInfo.FirstName;
                employee.MiddleName = userInfo.MiddleName;
                employee.LastName = userInfo.LastName;
                employee.UserId = userToken.ElementAt(2);

                await employeeRepository.CreateEmployee(employee);
                await displayMessage.DisplaySuccessMessage(string.Join(" ", userToken));
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error create employee " + ex);
            }
        }

    }

}
